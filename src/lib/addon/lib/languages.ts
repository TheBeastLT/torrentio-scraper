const languageMapping = {
  'dubbed': 'Dubbed',
  'multi audio': 'Multi Audio',
  'multi subs': 'Multi Subs',
  'dual audio': 'Dual Audio',
  'english': 'ğŸ‡¬ğŸ‡§',
  'japanese': 'ğŸ‡¯ğŸ‡µ',
  'russian': 'ğŸ‡·ğŸ‡º',
  'italian': 'ğŸ‡®ğŸ‡¹',
  'portuguese': 'ğŸ‡µğŸ‡¹',
  'spanish': 'ğŸ‡ªğŸ‡¸',
  'latino': 'ğŸ‡²ğŸ‡½',
  'korean': 'ğŸ‡°ğŸ‡·',
  'chinese': 'ğŸ‡¨ğŸ‡³',
  'taiwanese': 'ğŸ‡¹ğŸ‡¼',
  'french': 'ğŸ‡«ğŸ‡·',
  'german': 'ğŸ‡©ğŸ‡ª',
  'dutch': 'ğŸ‡³ğŸ‡±',
  'hindi': 'ğŸ‡®ğŸ‡³',
  'telugu': 'ğŸ‡®ğŸ‡³',
  'tamil': 'ğŸ‡®ğŸ‡³',
  'polish': 'ğŸ‡µğŸ‡±',
  'lithuanian': 'ğŸ‡±ğŸ‡¹',
  'latvian': 'ğŸ‡±ğŸ‡»',
  'estonian': 'ğŸ‡ªğŸ‡ª',
  'czech': 'ğŸ‡¨ğŸ‡¿',
  'slovakian': 'ğŸ‡¸ğŸ‡°',
  'slovenian': 'ğŸ‡¸ğŸ‡®',
  'hungarian': 'ğŸ‡­ğŸ‡º',
  'romanian': 'ğŸ‡·ğŸ‡´',
  'bulgarian': 'ğŸ‡§ğŸ‡¬',
  'serbian': 'ğŸ‡·ğŸ‡¸  ',
  'croatian': 'ğŸ‡­ğŸ‡·',
  'ukrainian': 'ğŸ‡ºğŸ‡¦',
  'greek': 'ğŸ‡¬ğŸ‡·',
  'danish': 'ğŸ‡©ğŸ‡°',
  'finnish': 'ğŸ‡«ğŸ‡®',
  'swedish': 'ğŸ‡¸ğŸ‡ª',
  'norwegian': 'ğŸ‡³ğŸ‡´',
  'turkish': 'ğŸ‡¹ğŸ‡·',
  'arabic': 'ğŸ‡¸ğŸ‡¦',
  'persian': 'ğŸ‡®ğŸ‡·',
  'hebrew': 'ğŸ‡®ğŸ‡±',
  'vietnamese': 'ğŸ‡»ğŸ‡³',
  'indonesian': 'ğŸ‡®ğŸ‡©',
  'malay': 'ğŸ‡²ğŸ‡¾',
  'thai': 'ğŸ‡¹ğŸ‡­'
}

export const LanguageOptions = {
  key: 'language',
  options: Object.keys(languageMapping).slice(5).map(lang => ({
    key: lang,
    label: `${languageMapping[lang]} ${lang.charAt(0).toUpperCase()}${lang.slice(1)}`
  }))
}

export function mapLanguages(languages) {
  const mapped = languages
      .map(language => languageMapping[language])
      .filter(language => language)
      .sort((a, b) => Object.values(languageMapping).indexOf(a) - Object.values(languageMapping).indexOf(b));
  const unmapped = languages
      .filter(language => !languageMapping[language])
      .sort((a, b) => a.localeCompare(b))
  return [...new Set([].concat(mapped).concat(unmapped))];
}

export function containsLanguage(stream, languages) {
  return languages.map(lang => languageMapping[lang]).some(lang => stream.title.includes(lang));
}

export function languageFromCode(code) {
  const entry = Object.entries(languageMapping).find(entry => entry[1] === code);
  return entry?.[0];
}
